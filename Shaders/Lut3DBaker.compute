#include "Include/D3D12.hlsl"
#include "Include/Sampler.cginc"
#include "Include/StdLib.cginc"
// Because this framework is supposed to work with the legacy render pipelines AND scriptable render
// pipelines we can't use Unity's shader libraries (some scriptable pipelines come with their own
// shader lib). So here goes a minimal shader lib only used for post-processing to ensure good
// compatibility with all pipelines.

#include "Include/ACES.hlsl"
#include "Include/Colors.hlsl"


RWTexture3D<float4> _MainTex : register(u0, space0);
Texture2D _Curves : register(t0, space0);


cbuffer Params : register(b0){
    float4 _Size; // x: lut_size, y: 1 / (lut_size - 1), zw: unused

    float4 _ColorBalance;
    float4 _ColorFilter;
    float4 _HueSatCon;

    float4 _ChannelMixerRed;
    float4 _ChannelMixerGreen;
    float4 _ChannelMixerBlue;

    float4 _Lift;
    float4 _InvGamma;
    float4 _Gain;
};



float3 LogGrade(float3 colorLog)
{
    // Contrast feels a lot more natural when done in log rather than doing it in linear
    colorLog = Contrast(colorLog, ACEScc_MIDGRAY, _HueSatCon.z);

    return colorLog;
}

float3 LinearGrade(float3 colorLinear)
{
    colorLinear = WhiteBalance(colorLinear, _ColorBalance.rgb);
    colorLinear *= _ColorFilter.rgb;
    
    colorLinear = ChannelMixer(colorLinear, _ChannelMixerRed.rgb, _ChannelMixerGreen.rgb, _ChannelMixerBlue.rgb);
   
    colorLinear = LiftGammaGainHDR(colorLinear, _Lift.rgb, _InvGamma.rgb, _Gain.rgb);
    // Do NOT feed negative values to RgbToHsv or they'll wrap around
    colorLinear = max(0.0, colorLinear);

    float3 hsv = RgbToHsv(colorLinear);

    // Hue Vs Sat
    float satMult;
   // satMult = saturate(_Curves.SampleLevel(bilinearClampSampler, float2(hsv.x, 0.25), 0).y) * 2.0;
    satMult = 0.5 * 2.0;
    // Sat Vs Sat
   // satMult *= saturate(_Curves.SampleLevel(bilinearClampSampler, float2(hsv.y, 0.25), 0).z) * 2.0;
    satMult *= 0.5 * 2.0;

    // Lum Vs Sat
    //satMult *= saturate(_Curves.SampleLevel(bilinearClampSampler, float2(Luminance(colorLinear), 0.25), 0).w) * 2.0;
    satMult *= 0.5 * 2.0;
    // Hue Vs Hue
    float hue = hsv.x + _HueSatCon.x;
    //float offset = saturate(_Curves.SampleLevel(bilinearClampSampler, float2(hue, 0.25), 0).x) - 0.5;
    float offset = 0.5 - 0.5;
    hue += offset;
    hsv.x = RotateHue(hue, 0.0, 1.0);

    colorLinear = HsvToRgb(hsv);
    colorLinear = Saturation(colorLinear, _HueSatCon.y * satMult);

    return colorLinear;
}

float3 ColorGrade(float3 colorLutSpace)
{
    float3 colorLinear = LUT_SPACE_DECODE(colorLutSpace);
    float3 aces = unity_to_ACES(colorLinear);
    
    // ACEScc (log) space
    float3 acescc = ACES_to_ACEScc(aces);
   
    acescc = LogGrade(acescc);
     
    aces = ACEScc_to_ACES(acescc);
    
    // ACEScg (linear) space
    float3 acescg = ACES_to_ACEScg(aces);
    
    acescg = LinearGrade(acescg);
    // Tonemap ODT(RRT(aces))
    aces = ACEScg_to_ACES(acescg);
    colorLinear = AcesTonemap(aces);

    return colorLinear;
}


void Eval(uint3 id)
{
    if (float(id.x) < _Size.x && float(id.y) < _Size.x && float(id.z) < _Size.x)
    {
        // Lut space (log space)
        float3 colorLutSpace = float3(id) * _Size.y;

        // Color grade & tonemap
        float3 graded = ColorGrade(colorLutSpace);

        _MainTex[id] = float4(graded, 1.0);
    }
}

[numthreads(4, 4, 4)]
void KGenLut3D_AcesTonemap(uint3 id : SV_DispatchThreadID) { Eval(id); }